from flask import Flask, render_template, request, redirect, url_for, session
import subprocess, re


app = Flask(__name__)
app.secret_key = 'key'


@app.route('/start_crawler', methods=['POST'])
def start_crawler():
    start_url = request.form['start_url']
    
    if not is_valid_url(start_url):
        return render_template('index.html', error='Invalid URL. Please enter a valid URL.'), 400
   
    
    allowed_domain = extract_domain(start_url)

    if allowed_domain is None:
        return render_template('index.html', error='Unable to extract domain from the provided URL.'), 400
     
    

    subprocess.Popen(['scrapy', 'crawl', 'crawler', '-a', f'start_urls={start_url}', '-a', f'allowed_domain={allowed_domain}'])
   
    print(f"Allowed domain: {allowed_domain}")
    return render_template('index.html', allowed_domain = allowed_domain)

@app.route('/test_sql_injection')
def test_sql_injection():
    output = subprocess.check_output(['python', 'sql.py'])
    return render_template('sql_injection_result.html', output=output.decode())

@app.route('/test_xss')
def test_xss():
    output = subprocess.check_output(['python', 'xss.py'])
    return render_template('xss_result.html', output=output.decode())

@app.route('/test_directory_traversal')
def test_directory_traversal():
    output = subprocess.check_output(['python', 'directory_traversal.py'])
    return render_template('directory_traversal_result.html', output=output.decode())


users = {
    'riad': 'riad',
    'ber': 'ber'
}

@app.route('/')
def index():
    if 'username' in session:
        return redirect(url_for('dashboard'))
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']

    if username in users and users[username] == password:
        session['username'] = username
        return redirect(url_for('index'))
    else:
        return render_template('login.html', error='Invalid credentials')

@app.route('/dashboard')
def dashboard():
    if 'username' in session:
        return render_template('index.html', username=session['username'])
    

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('index'))
    

def is_valid_url(url):
    
    url_pattern = r'^https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+'
    return bool(re.match(url_pattern, url))

def extract_domain(url):
    # Extract domain from URL (e.g., http://example.com/foo -> example.com)
    domain_regex = r'^https?://([^/]+)'
    match = re.match(domain_regex, url)
    if match:
        return match.group(1)
    else:
        return None




if __name__ == '__main__':
    app.run(debug=True)
