import requests
import sqlite3
from urllib.parse import quote

class DirectoryTraversalTester(object):
    def __init__(self, payloads_file):
        self.payloads_file = payloads_file
        self.payloads = self.load_payloads()

    def load_payloads(self):
        payloads = []
        with open(self.payloads_file, 'r') as f:
            for line in f:
                payload = line.strip()
                if payload:
                    payloads.append(payload)
        return payloads

payloads_file = 'directory_traversal.txt'
tester = DirectoryTraversalTester(payloads_file)


payloads = tester.payloads

conn = sqlite3.connect('urls.db')
cursor = conn.cursor()

try:
    cursor.execute('SELECT url FROM urls')
    urls = cursor.fetchall()

    for url in urls:
        original_url = url[0]

        for payload in payloads:
            traversal_url = original_url + quote(payload)
            print(f"Testing URL: {traversal_url}")

            try:
                response = requests.get(traversal_url)
                print(f"Status Code: {response.status_code}")

                if response.status_code == 200 and "[files]" in response.text:
                    print("Potential vulnerability found!")  
                    print(response.text)

            except requests.exceptions.RequestException as e:
                print(f"Error: {e}")

            print("\n")  

finally:
    conn.close()
