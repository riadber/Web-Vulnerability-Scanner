import os
import sqlite3
import requests, sys

import pprint, re
from urllib.parse import quote

class XSSTester(object):
    def __init__(self, payload_file):
        self.payload_file = payload_file
        self.payloads = self.load_payloads()
        
        

    def load_payloads(self):
        payloads = []
        with open(self.payload_file, 'r') as f:
            for line in f:
                payload = line.strip()
                if payload:
                    payloads.append(payload)
        return payloads
   
headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'X-Requested-With': 'XMLHttpRequest',
    'Referer': 'testasp.vulnweb.com',
    'Cookie': 'ASPSESSIONIDQATCTSSA=GLMFPEAADGECJCIMNPECOFOE',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Encoding': 'gzip,deflate',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36',
    'Connection': 'Keep-alive'
}

conn = sqlite3.connect('urls.db')
cursor = conn.cursor()

payload_file = 'xss_payloads.txt'  
xss_tester = XSSTester(payload_file)

payloads = xss_tester.payloads
patterns = [
         
        r"",
        r"alert\([\"'].*?[\"']\)",
        r"alert"
       
    ]

unexpected_parts = []

data0 = {}
try:
    cursor.execute('SELECT url FROM urls')
    urls = cursor.fetchall()

    for url in urls:
        original_url = url[0]
       

        if 'Search' in original_url:
            for payload in payloads:
                
                data = dict(data0)  
                data['tfSearch'] = payload
                response = requests.post(original_url, headers=headers, data=data)
                response_content = response.text
                for pattern in patterns:
                    matches = re.findall(pattern, response_content, re.IGNORECASE)
                    if response.status_code == 200 and matches:
                        print("POST request successful!")
                        pprint.pprint(headers)
                        print("Cross Site Scripting in : " "\n")
                        pprint.pprint(data)
                        print("URL :"+original_url)
                        print("-----------------------------------------")
                    
                    else:
                        print(f"POST request failed with status code: {response.status_code}")
                        break
                    print("\n")

finally:
    conn.close()